Leetcode 542

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int dup[][] = new int[mat.length][mat[0].length];
        boolean visited[][] = new boolean[ mat.length][mat[0].length ];
        Queue<int []> queue = new LinkedList<>();
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[i].length;j++){
                if(mat[i][j] != 0){
                    dup[i][j] = Integer.MAX_VALUE;
                }
                else{
                    queue.add( new int[] {i, j, 0});
                    visited[i][j] = true;
                }
            }
        }
        int direction[][] = new int[][]{ {0,-1} , {0, 1} , {-1, 0} , {1, 0} };
        while( ! queue.isEmpty() ){
            int[] current = queue.poll();
            int x = current[0];
            int y = current[1];
            int currentLevel = current[2];
            if( mat[x][y] != 0){
                dup[x][y] = currentLevel;
            }
            for(int i=0;i<4;i++){
              int nextX = x + direction[i][0];
              int nextY = y + direction[i][1];
              if( nextX >= 0 && nextX < mat.length && nextY >=0 && nextY < mat[0].length && !visited[nextX][nextY]){
                  queue.add( new int[]{ nextX, nextY, currentLevel + 1});
                  visited[nextX][nextY] = true;
              }
            }
        }
        return dup;
    }
}
